@page "/customers"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService




<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-star" /> Cliente
            <a class="btn btn-sm btn-primary float-end" href="/goals/create"><i class="oi oi-plus" /> Nuevo cliente</a>
        </span>
    </div>
    <div class="card-body">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar porteria..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            </div>
        </div>



        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Direccion</th>
                    <th>Telefono</th>


                </tr>
            </thead>

        </table>
    </div>
</div>



@code {
    private int currentPage = 1;
    private int totalPages;

    public List<Customer>? Customers { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/customers?page={page}";
            url2 = $"api/customers/totalPages";
        }
        else
        {
            url1 = $"api/customers?page={page}&filter={Filter}";
            url2 = $"api/customers/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Customer>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Customers = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int customerId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/customers/{customerId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync(1);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}